<?xml version="1.0"?>

<!-- Installation: copy
    either to %VSINSTALLDIR%\Common7\Packages\Debugger\Visualizers\ [system-wide]
    or to %USERPROFILE%\My Documents\Visual Studio 2013\Visualizers\ [per-user] -->

<!-- https://code.msdn.microsoft.com/Writing-type-visualizers-2eae77a2 -->
<!-- https://msdn.microsoft.com/en-us/library/jj620914.aspx -->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

<!-- libc++'s __compressed_pair is an internal type used pervasively for
      doing the empty base class optimization.
      __compressed_pair<U,V> derives from __compressed_pair_elem<U,0> and
      __compressed_pair_elem<V,1>. __compressed_pair_elem<T> is specialized on
      a 3rd template parameter:
      * if T is empty and non-final the 3rd param is 1 and it derives from T
      * else it has a member variable __value_ of type T
-->
<Type Name="std::__y1::__compressed_pair_elem&lt;*,*,0&gt;">
  <DisplayString>{__value_}</DisplayString>
  <Expand>
    <ExpandedItem>__value_</ExpandedItem>
  </Expand>
</Type>

<Type Name="std::__y1::__compressed_pair_elem&lt;*,*,1&gt;">
  <DisplayString>{*($T1*)this}</DisplayString>
  <Expand>
    <ExpandedItem>*($T1*)this</ExpandedItem>
  </Expand>
</Type>

<!--libc++'s short string optimization:
    A basic_string is 3 size_t words long. In the "alternate string layout"
    that we use, they are: pointer to data, size, capacity.
    (In the normal layout, it's capacity, size, data instead.)
    If a string is short enough that it fits in these three size_ts instead,
    the string data is stored inline in these 3 words, with the last byte of
    the storage storing the length of the string.
    The highest bit of the "capacity" word is set for normal, "long" strings,
    and that bit needs to be masked out to know the real capacity.
    If this bit is not set, the string data is stored inline.
    (In the normal layout, if the lowest bit in the first byte is set,
    it's a "long" string, requiring a long string to always have even
    capacity. A short string here stores its length in the first byte
    and the inline data in the remaining storage.)
-->

<Type Name="std::__y1::basic_string&lt;char,*&gt;">
  <Intrinsic Name="is_long"
          Expression="__r_.__value_.__s.__is_long_" />
  <Intrinsic Name="s_size"
      Expression="__r_.__value_.__s.__size_ &amp; ~0x80" />
  <Intrinsic Name="l_size"
      Expression="__r_.__value_.__l.__size_" />
  <DisplayString
      Condition="is_long()">{__r_.__value_.__l.__data_, [l_size()] }</DisplayString>
  <DisplayString
      Condition="!is_long()">{__r_.__value_.__s.__data_, [s_size()] }</DisplayString>
  <StringView Condition="is_long()">__r_.__value_.__l.__data_</StringView>
  <StringView Condition="!is_long()">__r_.__value_.__s.__data_</StringView>
  <Expand>
    <Item Name="[size]" Condition="is_long()" 
        ExcludeView="simple">l_size()</Item>
    <Item Name="[size]" Condition="!is_long()"
        ExcludeView="simple">s_size()</Item>
    <Item Name="[capacity]" Condition="is_long()" 
        ExcludeView="simple">__r_.__value_.__l.__cap_ * __endian_factor - 1</Item>
    <Item Name="[capacity]" Condition="!is_long()"
        ExcludeView="simple">22</Item>
    <ArrayItems>
      <Size Condition="is_long()">l_size()</Size>
      <Size Condition="!is_long()">s_size()</Size>
      <ValuePointer Condition="is_long()">__r_.__value_.__l.__data_</ValuePointer>
      <ValuePointer Condition="!is_long()">__r_.__value_.__s.__data_</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="std::__y1::basic_string&lt;wchar_t,*&gt;">
  <Intrinsic Name="is_long"
          Expression="__r_.__value_.__s.__is_long_" />
  <Intrinsic Name="s_size"
      Expression="__r_.__value_.__s.__size_ &amp; ~0x80" />
  <Intrinsic Name="l_size"
      Expression="__r_.__value_.__l.__size_" />
  <DisplayString
      Condition="is_long()">{__r_.__value_.__l.__data_}</DisplayString>
  <DisplayString
      Condition="!is_long()">{__r_.__value_.__s.__data_}</DisplayString>
  <StringView Condition="is_long()">__r_.__value_.__l.__data_</StringView>
  <StringView Condition="!is_long()">__r_.__value_.__s.__data_</StringView>
  <Expand>
    <Item Name="[size]" Condition="is_long()" 
        ExcludeView="simple">l_size()</Item>
    <Item Name="[size]" Condition="!is_long()"
        ExcludeView="simple">s_size()</Item>
    <Item Name="[capacity]" Condition="is_long()" 
        ExcludeView="simple">__r_.__value_.__l.__cap_ * __endian_factor - 1</Item>
    <Item Name="[capacity]" Condition="!is_long()"
        ExcludeView="simple">10</Item>
    <ArrayItems>
      <Size Condition="is_long()">l_size()</Size>
      <Size Condition="!is_long()">s_size()</Size>
      <ValuePointer Condition="is_long()">__r_.__value_.__l.__data_</ValuePointer>
      <ValuePointer Condition="!is_long()">__r_.__value_.__s.__data_</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<!--
    containers
-->

<Type Name="std::__y1::pair&lt;*&gt;">
  <AlternativeType Name="TPair&lt;*&gt;" />
  <DisplayString>({first}, {second})</DisplayString>
  <Expand>
    <Item Name="first">first</Item>
    <Item Name="second">second</Item>
  </Expand>
</Type>

<Type Name="std::__y1::vector&lt;*&gt;">
  <AlternativeType Name="TVector&lt;*&gt;" />
  <DisplayString>{{ size={__end_ - __begin_} }}</DisplayString>
  <Expand>
    <Item Name="[size]" ExcludeView="simple">__end_ - __begin_</Item>
    <Item Name="[capacity]" ExcludeView="simple">__end_cap_.__value_ - __begin_</Item>
    <ArrayItems>
      <Size>__end_ - __begin_</Size>
      <ValuePointer>__begin_</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="TArrayRef&lt;*&gt;">
  <DisplayString>{{ size={S_} }}</DisplayString>
  <Expand>
    <Item Name="[size]" ExcludeView="simple">S_</Item>
    <ArrayItems>
      <Size>S_</Size>
      <ValuePointer>T_</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="std::__y1::array&lt;*,*&gt;">
  <DisplayString>{{ size={$T2} }}</DisplayString>
  <Expand>
    <ArrayItems>
      <Size>$T2</Size>
      <ValuePointer>__elems_</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<Type Name="std::__y1::deque&lt;*&gt;">
  <AlternativeType Name="TDeque&lt;*&gt;" />
  <DisplayString>{{ size={__size_.__value_} }}</DisplayString>
  <Expand>
    <Item Name="[size]" ExcludeView="simple">__size_.__value_</Item>
    <Item Name="[capacity]" ExcludeView="simple">__map_.__begin_ == __map_.__end_ ? 0 : (__map_.__end_ - __map_.__begin_) * (32 * sizeof(void*) / sizeof(value_type) > 2 ? 32 * sizeof(void*) / sizeof(value_type) : 2) - 1</Item>
    <IndexListItems>
      <Size>__size_.__value_</Size>
      <ValueNode>__map_.__begin_[(__start_ + $i) / (32 * sizeof(void*) / sizeof(value_type) > 2 ? 32 * sizeof(void*) / sizeof(value_type) : 2)][(__start_ + $i) % (32 * sizeof(void*) / sizeof(value_type) > 2 ? 32 * sizeof(void*) / sizeof(value_type) : 2)]</ValueNode>
    </IndexListItems>
  </Expand>
</Type>

<Type Name="std::__y1::queue&lt;*&gt;">
  <AlternativeType Name="TQueue&lt;*&gt;" />
  <AlternativeType Name="std::__y1::stack&lt;*&gt;" />
  <AlternativeType Name="TStack&lt;*&gt;" />
  <DisplayString>{c}</DisplayString>
  <Expand>
    <ExpandedItem>c</ExpandedItem>
  </Expand>
</Type>

<Type Name="THashTable&lt;*&gt;">
  <DisplayString>{{ size={num_elements} }}</DisplayString>
  <Expand>
    <LinkedListItems>
      <HeadPointer>buckets.Size.Divisor == 1 ? (__yhashtable_node&lt;$T1&gt;*)0 : (__yhashtable_node&lt;$T1&gt;*)((char*)buckets.Data + 1)</HeadPointer>
      <NextPointer>
      ((uintptr_t)this &amp; 1) ?
      (__yhashtable_node&lt;$T1&gt;*)(
        *(void**)((uintptr_t)this - 1) ? (*(uintptr_t*)((uintptr_t)this - 1) &amp; -1) : ( ((uintptr_t*)((uintptr_t)this - 1))[1] != 1 ? (uintptr_t)this + sizeof(void*) : 0)
      )
      : next</NextPointer>
      <ValueNode>*this</ValueNode>
    </LinkedListItems>
  </Expand>
</Type>

<Type Name="__yhashtable_node&lt;*&gt;">
  <DisplayString Condition="((uintptr_t)this &amp; 1) == 0">{val}</DisplayString>
  <DisplayString>(new bucket)</DisplayString>
  <Expand>
    <ExpandedItem Condition="((uintptr_t)this &amp; 1) == 0">val</ExpandedItem>
  </Expand>
</Type>

<Type Name="THashMap&lt;*&gt;">
  <AlternativeType Name="THashMultiMap&lt;*&gt;" />
  <AlternativeType Name="THashSet&lt;*&gt;" />
  <AlternativeType Name="THashMultiSet&lt;*&gt;" />
  <DisplayString>{rep}</DisplayString>
  <Expand>
    <ExpandedItem>rep</ExpandedItem>
  </Expand>
</Type>

<Type Name="std::__y1::__value_type&lt;*&gt;">
  <DisplayString>{__cc}</DisplayString>
  <Expand>
    <ExpandedItem>__cc</ExpandedItem>
  </Expand>
</Type>

<Type Name="std::__y1::__tree&lt;*&gt;">
  <DisplayString>{{ size={__pair3_.__value_} }}</DisplayString>
  <Expand>
    <TreeItems>
      <Size>__pair3_.__value_</Size>
      <HeadPointer>(__node*)__pair1_.__value_.__left_</HeadPointer>
      <LeftPointer>(__tree_node&lt;$T1,void *&gt;*)__left_</LeftPointer>
      <RightPointer>(__tree_node&lt;$T1,void *&gt;*)__right_</RightPointer>
      <ValueNode>__value_</ValueNode>
    </TreeItems>
  </Expand>
</Type>

<Type Name="std::__y1::map&lt;*&gt;">
  <AlternativeType Name="TMap&lt;*&gt;" />
  <AlternativeType Name="std::__y1::multimap&lt;*&gt;" />
  <AlternativeType Name="TMultiMap&lt;*&gt;" />
  <AlternativeType Name="std::__y1::set&lt;*&gt;" />
  <AlternativeType Name="TSet&lt;*&gt;" />
  <AlternativeType Name="std::__y1::multiset&lt;*&gt;" />
  <AlternativeType Name="TMultiSet&lt;*&gt;" />
  <DisplayString>{__tree_}</DisplayString>
  <Expand>
    <ExpandedItem>__tree_</ExpandedItem>
  </Expand>
</Type>

<Type Name="TAvlTree&lt;*&gt;">
  <DisplayString Condition="Root_ == 0">empty</DisplayString>
  <DisplayString>{{ height={Root_->Height_} }}</DisplayString>
  <Expand>
    <TreeItems>
      <HeadPointer>Root_</HeadPointer>
      <LeftPointer>Left_</LeftPointer>
      <RightPointer>Right_</RightPointer>
      <ValueNode>*($T1*)this</ValueNode>
    </TreeItems>
  </Expand>
</Type>

<Type Name="TRbTree&lt;*&gt;">
  <DisplayString>{{ TRbTree }}</DisplayString>
  <Expand>
    <TreeItems>
      <HeadPointer>($T1*)Data_.Parent_</HeadPointer>
      <LeftPointer>($T1*)Left_</LeftPointer>
      <RightPointer>($T1*)Right_</RightPointer>
      <ValueNode>*this</ValueNode>
    </TreeItems>
  </Expand>
</Type>

<!--
    strings
-->

<!-- aka TString -->
<Type Name="TBasicString&lt;*,*&gt;">
  <DisplayString>{S_.T_}</DisplayString>
  <Expand>
    <ExpandedItem>S_.T_</ExpandedItem>
  </Expand>
</Type>

<!-- aka TStringBuf -->
<Type Name="TBasicStringBuf&lt;char,*&gt;">
  <DisplayString>{__data,[__size]s8}</DisplayString>
  <Expand>
    <Item Name="[size]" ExcludeView="simple">__size</Item>
    <ArrayItems>
      <Size>__size</Size>
      <ValuePointer>__data</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<!-- aka TWtringBuf -->
<Type Name="TBasicStringBuf&lt;unsigned short,*&gt;">
  <DisplayString>{__data,[__size]su}</DisplayString>
  <Expand>
    <Item Name="[size]" ExcludeView="simple">__size</Item>
    <ArrayItems>
      <Size>__size</Size>
      <ValuePointer>(wchar_t*)__data</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<!-- aka string -->
<Type Name="ystd::basic_string&lt;char,*&gt;">
  <DisplayString Condition="(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">{__r_.__first_.__l.__data_,[__r_.__first_.__l.__size_]s8}</DisplayString>
  <DisplayString Condition="!(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">{__r_.__first_.__s.__data_,[__r_.__first_.__s.__size_ / 2]s8}</DisplayString>
  <Expand>
    <!-- long strings -->
    <Item Name="[size]" ExcludeView="simple" Condition="(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">__r_.__first_.__l.__size_</Item>
    <Item Name="[capacity]" ExcludeView="simple" Condition="(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">__r_.__first_.__l.__cap_ - 1</Item>
    <ArrayItems Condition="(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">
      <Size>__r_.__first_.__l.__size_</Size>
      <ValuePointer>__r_.__first_.__l.__data_</ValuePointer>
    </ArrayItems>
    <!-- short strings -->
    <Item Name="[size]" ExcludeView="simple" Condition="!(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">__r_.__first_.__s.__size_ / 2</Item>
    <Item Name="[capacity]" ExcludeView="simple" Condition="!(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">__min_cap - 1</Item>
    <ArrayItems Condition="!(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">
      <Size>__r_.__first_.__s.__size_ / 2</Size>
      <ValuePointer>__r_.__first_.__s.__data_</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<!-- aka wstring -->
<Type Name="ystd::basic_string&lt;unsigned short,*&gt;">
  <AlternativeType Name="ystd::basic_string&lt;wchar_t,*&gt;" />
  <DisplayString Condition="(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">{__r_.__first_.__l.__data_,[__r_.__first_.__l.__size_]su}</DisplayString>
  <DisplayString Condition="!(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">{__r_.__first_.__s.__data_,[__r_.__first_.__s.__size_ / 2]su}</DisplayString>
  <Expand>
    <!-- long strings -->
    <Item Name="[size]" ExcludeView="simple" Condition="(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">__r_.__first_.__l.__size_</Item>
    <Item Name="[capacity]" ExcludeView="simple" Condition="(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">__r_.__first_.__l.__cap_ - 1</Item>
    <ArrayItems Condition="(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">
      <Size>__r_.__first_.__l.__size_</Size>
      <ValuePointer>__r_.__first_.__l.__data_</ValuePointer>
    </ArrayItems>
    <!-- short strings -->
    <Item Name="[size]" ExcludeView="simple" Condition="!(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">__r_.__first_.__s.__size_ / 2</Item>
    <Item Name="[capacity]" ExcludeView="simple" Condition="!(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">__min_cap - 1</Item>
    <ArrayItems Condition="!(bool)(__r_.__first_.__s.__size_ &amp; __short_mask)">
      <Size>__r_.__first_.__s.__size_ / 2</Size>
      <ValuePointer>__r_.__first_.__s.__data_</ValuePointer>
    </ArrayItems>
  </Expand>
</Type>

<!--
    smart pointers
-->

<Type Name="THolder&lt;*&gt;">
  <AlternativeType Name="TAutoPtr&lt;*&gt;" />
  <AlternativeType Name="TIntrusivePtr&lt;*&gt;" />
  <AlternativeType Name="TIntrusiveConstPtr&lt;*&gt;" />
  <DisplayString Condition="T_ == 0">empty</DisplayString>
  <DisplayString>{*T_}</DisplayString>
  <Expand>
    <ExpandedItem Condition="T_ != 0">T_</ExpandedItem>
  </Expand>
</Type>

<Type Name="TSharedPtr&lt;*&gt;">
  <DisplayString Condition="T_ == 0">empty</DisplayString>
  <DisplayString>{*T_}</DisplayString>
  <Expand>
    <Item Condition="C_ != 0" Name="[refcount]">*C_</Item>
    <Item Condition="T_ != 0" Name="[ptr]">T_</Item>
  </Expand>
</Type>

<Type Name="TPtr&lt;*&gt;">
  <AlternativeType Name="TObj&lt;*&gt;" />
  <AlternativeType Name="TMObj&lt;*&gt;" />
  <DisplayString Condition="ptr == 0">empty</DisplayString>
  <DisplayString>{*ptr}</DisplayString>
  <Expand>
    <ExpandedItem Condition="ptr != 0">ptr</ExpandedItem>
  </Expand>
</Type>

</AutoVisualizer>
