#pragma once

#include "generator_spec.h"
#include "dir_cleaner.h"
#include "jinja_helpers.h"
#include "spec_based_generator.h"
#include "yexport_generator.h"

#include <util/generic/hash.h>
#include <util/generic/hash_set.h>
#include <util/generic/vector.h>
#include <util/generic/set.h>

#include <filesystem>
#include <string>

#include <type_traits>

namespace NYexport {

namespace NCMake {
    constexpr std::string_view CMakeListsFile = "CMakeLists.txt";
    constexpr std::string_view GeneratedDisclamer =
        R"(
# This file was generated by the build system used internally in the Yandex monorepo.
# Only simple modifications are allowed (adding source-files to targets, adding simple properties
# like target_include_directories). These modifications will be ported to original
# ya.make files by maintainers. Any complex modifications which can't be ported back to the
# original buildsystem will not be accepted.


)";
}

enum class EPlatform {
    EP_Linux_x86_64,
    EP_Linux_x86_64_Cuda,
    EP_Linux_Aarch64,
    EP_Linux_Aarch64_Cuda,
    EP_Linux_Ppc64LE,
    EP_Linux_Ppc64LE_Cuda,
    EP_MacOs_x86_64,
    EP_MacOs_Arm64,
    EP_Windows_x86_64,
    EP_Windows_x86_64_Cuda,
    EP_Android_Arm,
    EP_Android_Arm64,
    EP_Android_x86,
    EP_Android_x86_64,
    EP_Other
};

struct TProjectConf {
    static constexpr std::string_view ConanSetupSection =
        R"(
if (CMAKE_CROSSCOMPILING)
  include(${CMAKE_BINARY_DIR}/conan_paths.cmake)
else()
  conan_cmake_autodetect(settings)
  conan_cmake_install(
    PATH_OR_REFERENCE ${CMAKE_SOURCE_DIR}
    INSTALL_FOLDER ${CMAKE_BINARY_DIR}
    BUILD missing
    REMOTE conancenter
    SETTINGS ${settings}
      ENV "CONAN_CMAKE_GENERATOR=${CMAKE_GENERATOR}"
      CONF "tools.cmake.cmaketoolchain:generator=${CMAKE_GENERATOR}"
  )
endif()

)";
    std::string ProjectName;
    fs::path ArcadiaRoot;
    ECleanIgnored CleanIgnored = ECleanIgnored::Disabled;

    TProjectConf() = default;
    TProjectConf(std::string_view name, const fs::path& arcadiaRoot, ECleanIgnored cleanIgnored = ECleanIgnored::Disabled);
};

struct TPlatformConf {
    std::string CMakeFlag;
    std::string CMakeListsFile;
    EPlatform Platform;

    TPlatformConf(std::string_view platformName);
};

struct TPlatform {
    TPlatformConf Conf;
    THolder<TSemGraph> Graph;
    TVector<TNodeId> StartDirs;
    THashMap<std::string, TVector<std::string>> GlobalVars;
    THashSet<fs::path> SubDirs;
    std::string Name;

    explicit TPlatform(std::string_view platformName);
};

struct TGlobalProperties {
    TSet<std::string> Languages;
    TSet<std::string> ConanPackages;
    TSet<std::string> ConanToolPackages;
    TSet<std::string> ConanImports;
    TSet<std::string> ConanOptions;
    TSet<fs::path> GlobalModules; // module pathes
    THashSet<fs::path> ArcadiaScripts;
};

class TCMakeGenerator: public TSpecBasedGenerator {
private:
    TProjectConf Conf;
    TDirCleaner Cleaner;
    TVector<TPlatform> Platforms;
    TGlobalProperties GlobalProperties;

    bool GenerateCMakeLists(const TVector<fs::path>& semGraphs, const TVector<std::string>& platforms);
    void MergePlatforms() const;
    TVector<std::string> GetAdjustedLanguagesList() const;
    void RenderRootCMakeList() const;
    void CopyArcadiaScripts() const;
    void RenderConanRequirements() const;

    void SetArcadiaRoot(const fs::path& arcadiaRoot);
    void RenderPlatform(TPlatform& platform);

    virtual void Render(ECleanIgnored cleanIgnored) override;

public:
    TCMakeGenerator() = default;
    TCMakeGenerator(std::string_view name, const fs::path& arcadiaRoot);

    static THolder<TCMakeGenerator> Load(const fs::path& arcadiaRoot, const std::string& generator, const fs::path& configDir = "");

    void SetProjectName(const std::string& projectName) override;
    void LoadSemGraph(const std::string& platform, const fs::path& semGraph) override;

    const TNodeSemantics& ApplyReplacement(TPathView path, const TNodeSemantics& inputSem) const {
        return TargetReplacements_.ApplyReplacement(path, inputSem);
    }

    void Dump(IOutputStream& out) override; ///< Get dump of attributes tree with values for testing
};

}
